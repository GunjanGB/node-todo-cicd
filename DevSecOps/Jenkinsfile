pipeline {
    agent any
    environment{
        SONAR_HOME = tool 'Sonar'
    }
    
    stages {
        
        stage("code"){
            steps{
                git url: "https://github.com/GunjanGB/node-todo-cicd.git/", branch: "master"
               
            }
        }
        stage("SonarQube Analysis"){
            steps{
                withSonarQubeEnv("Sonar"){
                 sh " $SONAR_HOME/bin/sonar-scanner -DSonar.projectName=notetodo -DSonar.projectKey=notetodo "     
                }
               
            }
        }
        stage("SonarQube Quality Gates"){
            steps{
                timeout(time:1, unit : "MINUTES"){
                waitForQualityGate abortPipeline : false
                }
            }
        }
        
        
            
        stage("build and test"){
            steps{
                sh "docker build -t node-app:latest ."
               
            }
        }
        stage("Trivy"){
            steps{
                sh "trivy image node-app"
            }
        }
        stage("OWASP"){
            steps{
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'OWASP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage("push"){
            steps{
                withCredentials([usernamePassword(credentialsId:"DockerHubCreds",passwordVariable:"dockerHubPass",usernameVariable:"dockerHubUser")]){
                sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPass}"
                sh "docker tag node-app:latest ${env.dockerHubUser}/node-app:latest"
                sh "docker push ${env.dockerHubUser}/node-app:latest"
               
                }
            }
        }
        stage('Deploy') {
            steps {
                sh 'docker compose down'
                sh 'docker compose up -d'
            }
        }
    }
}
